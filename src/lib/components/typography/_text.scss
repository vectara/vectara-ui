@use "sass:map";

$textRhythm: $sizeM;

.vuiText {
  overflow-wrap: break-word;
  word-break: break-word;

  a {
    color: $colorPrimary !important;
    text-decoration: none;

    &:hover {
      text-decoration: underline;
    }
  }

  ul {
    list-style: disc;
  }

  ol {
    list-style: auto;
  }

  ul,
  ol {
    margin-left: $sizeM;
    margin-bottom: $textRhythm;
  }

  hr {
    border-top: none;
    border-left: none;
    border-right: none;
    border-bottom: 1px solid;
    width: 100%;
    border-bottom-color: $borderColor;
    margin-bottom: $textRhythm;
  }

  pre:not(:has(> code)),
  code {
    background-color: $colorLightShade;
    padding: $sizeXxxs $sizeXxs;
  }

  pre:has(> code) {
    display: block;
    background-color: $colorLightShade;
    padding: $sizeXs $sizeS;
    margin-bottom: $textRhythm;
    border-radius: $sizeXs;
  }

  pre > code {
    word-wrap: break-word;
    word-break: break-word;
    white-space: pre-wrap;
  }

  p > pre:only-child,
  p > code:only-child {
    display: block;
    padding: $sizeXs $sizeS;
    border: none;
    border-radius: $sizeXs;
    overflow: auto;
    background-color: $colorLightShade;
  }

  blockquote {
    border-left: 4px solid $colorLightShade;
    padding-left: $sizeM;
    color: $colorDarkerShade;
    margin-bottom: $textRhythm;
  }

  table {
    width: 100%;
    table-layout: fixed;
    border: 1px solid $borderColorLight;
    margin-bottom: $textRhythm;

    thead {
      background-color: $colorLightShade;
      border-bottom: 1px solid $borderColorLight;
    }

    tbody tr {
      border-bottom: 1px solid $borderColorLight;
    }

    th {
      font-size: $fontSizeSmall;
      font-weight: $fontWeightBold;
      padding: $sizeXs $sizeS;
      text-align: left;
    }

    td {
      font-size: $fontSizeStandard;
      vertical-align: middle;
      padding: $sizeS $sizeS;
    }
  }

  sup {
    vertical-align: super;
  }

  & > :last-child {
    margin-bottom: 0;
  }
}

.vuiText--truncate {
  @include truncateText;
}

@mixin defineTextStyles($fontSize, $fontWeight) {
  color: $colorText;
  font-size: $fontSize;
  line-height: 1.4;

  p,
  ul,
  ol {
    font-size: $fontSize;
    line-height: 1.4;
    font-weight: $fontWeight;
    margin-bottom: $textRhythm;
  }

  code,
  pre {
    font-size: $fontSize * 0.85;
  }

  h1 {
    font-size: $fontSize * 2;
    line-height: 1.1;
    font-weight: $fontWeightStrong;
    margin-bottom: $textRhythm;
  }

  h2 {
    font-size: $fontSize * 1.5;
    line-height: 1.2;
    font-weight: $fontWeightNormal;
    margin-bottom: $textRhythm;
  }

  h3 {
    font-size: $fontSize * 1.25;
    line-height: 1.3;
    font-weight: $fontWeightNormal;
    margin-bottom: $textRhythm;
  }

  h4 {
    font-size: $fontSize;
    line-height: 1.4;
    font-weight: $labelFontWeight;
    margin-bottom: $textRhythm;
  }

  h5 {
    font-size: $fontSize * 0.85;
    line-height: 1.4;
    font-weight: $labelFontWeight;
    margin-bottom: $textRhythm;
  }

  h6 {
    font-size: $fontSize * 0.75;
    line-height: 1.4;
    font-weight: $labelFontWeight;
    margin-bottom: $textRhythm;
  }
}

$size: (
  xs: (
    size: $fontSizeSmall,
    weight: $fontWeightStrong
  ),
  s: (
    size: $fontSizeStandard,
    weight: $fontWeightNormal
  ),
  m: (
    size: $fontSizeMedium,
    weight: $fontWeightNormal
  ),
  l: (
    size: $fontSizeLarge,
    weight: $fontWeightNormal
  )
);

@each $sizeName, $sizeValue in $size {
  .vuiText--#{$sizeName} {
    @include defineTextStyles(map.get($sizeValue, "size"), map.get($sizeValue, "weight"));
  }
}

$align: left, center, right;

@each $alignValue in $align {
  .vuiText--#{$alignValue} {
    text-align: #{$alignValue};
  }
}
